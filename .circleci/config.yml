# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@7.0.0
  kubernetes: circleci/kubernetes@1.3.1

commands:
  load_deps_image:
    description: "Load the Therr dependencies image and tag it as latest"
    parameters:
      for:
        type: string
    steps:
      - run:
          name: Load Therr Deps image
          command: |
            echo Loading dependencies image for << parameters.for >> Therr services
            docker image load < "images/therr_deps_${CIRCLE_SHA1}"
      - run:
         name: Tag Therr Deps image locally
         command: |
           docker tag "therrapp/service-dependencies:${CIRCLE_SHA1}" "therrapp/service-dependencies:latest"

jobs:
  docker_build_base_image:
    docker:
      - image: cimg/go:1.22.11
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/
      - run:
          name: Login to DockerHub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Build Docker Dependencies Image
          command: docker build -t "therrapp/service-dependencies:${CIRCLE_SHA1}" .
      - run:
          name: Save Docker Dependencies Image as tar
          command: |
            mkdir -p images
            docker image save -o "images/therr_deps_${CIRCLE_SHA1}" "therrapp/service-dependencies:${CIRCLE_SHA1}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project
            - images
  test_libraries:
    docker:
      - image: cimg/go:1.22.11
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/
      - load_deps_image:
          for: testing
      - run:
          name: Inspect loaded Docker image
          command: docker image ls
      - run:
          name: Run Unit Tests - JS Utilities Library
          command: docker run -it therrapp/service-dependencies /bin/sh -c 'cd therr-public-library/therr-js-utilities/; npm test'
      - run:
          name: Run Unit Tests - React Library
          command: docker run -it therrapp/service-dependencies /bin/sh -c 'cd therr-public-library/therr-react/; npm test'
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  docker_build_test_publish_images:
    docker:
      - image: cimg/go:1.20.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    environment:
      CICD_BRANCH: << pipeline.git.branch >>
      GIT_SHA: << pipeline.git.revision >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
            at: ~/
      - load_deps_image:
          for: building
      - run:
          name: Login to DockerHub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Build Microservice Docker Images
          command: ./_bin/cicd/build.sh
      - run:
          name: Run Unit Tests on Microservices
          command: ./_bin/cicd/test-microservices.sh
      - add_ssh_keys:
          fingerprints:
            - "7a:7c:76:bd:7b:be:2a:cd:de:90:c4:16:78:e1:eb:f6"
      - run:
          name: Publish Docker Images
          command: ./_bin/cicd/publish.sh
  test-integrations:
    docker:
      - image: google/cloud-sdk
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    environment:
      CICD_BRANCH: << pipeline.git.branch >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
            at: ~/
      - load_deps_image:
          for: testing
      - run:
          name: Login to DockerHub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Apply Stage w/ Kubectl
          # This should pull the latest images (verify and determine if necessary to set image with commit SHA)
          # command: kubectl apply -f k8s/test && kubectl wait -f k8s/test --for=condition=ContainersReady --timeout=1s
          command: echo "Hello, Apply Kubectl"
      - run:
          name: Run Integration Tests
          command: echo "Hello, Integration Tests"
  deploy:
    docker:
      - image: google/cloud-sdk
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    environment:
      CICD_BRANCH: << pipeline.git.branch >>
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
            at: ~/
      - load_deps_image:
          for: deploying
      - run:
          name: Login to DockerHub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run: 
          name: Login to Google Cloud and connect to GKE Cluster
          command: |
          gke-gcloud-auth-plugin --version
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project therr-app
          gcloud --quiet config set compute/zone us-central1-a
          gcloud container clusters get-credentials cluster-1
      - add_ssh_keys:
          fingerprints:
            - "7a:7c:76:bd:7b:be:2a:cd:de:90:c4:16:78:e1:eb:f6"
      - run:
          name: Deploy Changes To GKE
          command: ./_bin/cicd/deploy.sh

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build_test_publish_deploy:
    jobs:
      - docker_build_base_image
      - test_libraries:
          requires:
          - docker_build_base_image
          filters:
            branches:
              ignore:
                - stage
                - main
      - docker_build_test_publish_images:
          requires:
          - docker_build_base_image
          filters:
            branches:
              only:
                - stage
      - test-integrations:
          requires:
          - docker_build_test_publish_images
          - docker_build_base_image
          filters:
            branches:
              only:
                - stage
      - deploy:
          requires:
          - docker_build_base_image
          filters:
            branches:
              only:
                - main
