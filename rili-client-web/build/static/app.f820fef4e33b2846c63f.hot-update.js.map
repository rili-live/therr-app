{"version":3,"sources":["webpack:///./src/components/layout.tsx"],"names":[],"mappings":"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","file":"app.f820fef4e33b2846c63f.hot-update.js","sourcesContent":["import * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Route, Switch, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { TransitionGroup as Animation } from 'react-transition-group';\n// import * as ReactGA from 'react-ga';\n// import TopNav from './pieces/TopNav';\n// import { configureAuthRoute } from '../library/authentication';\nimport { RedirectWithStatus } from 'rili-public-library/react-components/redirect-with-status';\n// import { Alerts } from '../library/alerts'\n// import { Loader } from '../library/loader';\nimport scrollTo from 'rili-public-library/utilities/scroll-to';\nimport initInterceptors from '../interceptors';\n// import roleConfig from '../../roleConfig';\nimport * as globalConfig from '../../../global-config.js';\n// const AuthRoute = configureAuthRoute(roleConfig);\nimport routes from '../routes';\nimport { Location } from 'history';\n\nlet _viewListener: any;\n\nconst mapStateToProps = (state: any) => {\n    return {\n        'redirectRoute': state.redirectRoute\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n\n    }, dispatch);\n};\n\ninterface ILayoutRouterProps {\n\n}\n\ninterface ILayoutProps extends RouteComponentProps {\n\n}\n\ninterface ILayoutProps extends RouteComponentProps<ILayoutRouterProps> {\n// Add your regular properties here\n}\n\ninterface ILayoutDispatchProps {\n// Add your dispatcher properties here\n}\n\n// interface ILayoutState {\n// }\n\n// TODO: Animation between view change is not working when wrapped around a Switch\nclass Layout extends React.Component<ILayoutProps & ILayoutDispatchProps, any> {\n    constructor(props: ILayoutProps) {\n        super(props);\n\n        this.state = {\n            'clientHasLoaded': false\n        };\n\n        this.onViewChange = this.onViewChange.bind(this);\n    }\n\n    componentWillMount() {\n        // TODO: Check if this should be initialized in index with history passed as argument\n        // Initialize global interceptors such as 401, 403\n        initInterceptors(this.props.history, globalConfig.baseApiRoute, 300);\n        _viewListener = this.props.history.listen((location: Location, action: any) => {\n            this.onViewChange(location);\n        });\n    }\n\n    componentDidMount() {\n        // ReactGA.initialize(globalConfig[process.env.NODE_ENV].googleAnalyticsKey);\n        this.setState({\n            'clientHasLoaded': true\n        });\n    }\n\n    onViewChange(location: Location) {\n        scrollTo(0, 100);\n        // if (typeof(window) !== 'undefined') {\n        //     ReactGA.set({ 'page': window.location.pathname });\n        //     ReactGA.pageview(window.location.pathname);\n        // }\n    }\n\n    render() {\n        // Cloak the view so it doesn't flash before client mounts\n        if (this.state.clientHasLoaded) {\n            return (\n                <div>\n                    <header>\n                        Header\n                        {/* <TopNav/> */}\n                    </header>\n\n                    <Animation\n                        appear={true}\n                        enter={true}\n                        exit={true}\n                        timeout={250}\n                        component=\"div\"\n                        className=\"content-container view\"\n                    >\n                        <Switch>\n                            {routes.map((route, i) => {\n                                if (route.access) {\n                                    return (\n                                        <Route location={this.props.location} key={i} {...route} />\n                                    );\n                                } else {\n                                    return (\n                                        <Route location={this.props.location} key={i} {...route} />\n                                    );\n                                }\n                            })}\n                            <RedirectWithStatus from=\"/redirect\" to=\"/\" />\n                        </Switch>\n                    </Animation>\n\n                    {/* <Alerts></Alerts> */}\n                    {/* <Loader></Loader> */}\n\n                    <footer>This is the footer.</footer>\n                </div>\n            );\n        } else {\n            // Opportunity to add a loader of graphical display\n            return (\n                <div>\n                    <header>\n                        Header\n                        {/* <TopNav/> */}\n                    </header>\n                </div>\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        _viewListener();\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Layout));"],"sourceRoot":""}