{"version":3,"sources":["webpack:///./src/routeConfig.ts","webpack:///./src/server-client.tsx"],"names":[],"mappings":"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","file":"server-client.51804a9a0a70ba0babfb.hot-update.js","sourcesContent":["export default [\n    {\n        route: '/',\n        head: {\n            title: 'Home'\n        },\n        view: 'index'\n    },\n    {\n        route: '/chat-room',\n        head: {\n            title: 'Chat Room'\n        },\n        view: 'index'\n    },\n    {\n        route: '*',\n        head: {\n            title: 'Not Found'\n        },\n        view: 'index'\n    }\n];\n","import * as http from 'http';\nimport * as https from 'https';\nimport * as path from 'path';\nimport * as express from 'express';\nimport * as fs from 'fs';\n\n// TODO: RFRONT-9: Fix window is undefined hack\ndeclare global {\n    namespace NodeJS {\n        interface Global { // tslint:disable-line\n            window: any;\n        }\n    }\n}\n\nif (!process.env.BROWSER) {\n    global.window = {}; // Temporarily define window for server-side\n}\n\nimport * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { StaticRouter, matchPath } from 'react-router-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport printLogs from 'rili-public-library/utilities/print-logs'; // tslint:disable-line no-implicit-dependencies\nimport * as globalConfig from '../../global-config.js';\nimport routeConfig from './routeConfig';\nimport rootReducer from './reducers';\nimport Layout from './components/layout';\nimport routes, { IRoute } from './routes';\n\n// Initialize the server and configure support for handlebars templates\nconst createAppServer = () => {\n    let app = express();\n    let server;\n    if (process.env.NODE_ENV === 'development') {\n        server = http.createServer(app);\n    } else if (process.env.NODE_ENV === 'production') {\n        let httpsCredentials = {\n            key: fs.readFileSync(globalConfig[process.env.NODE_ENV].security.keyLocation),\n            cert: fs.readFileSync(globalConfig[process.env.NODE_ENV].security.certLocation),\n        };\n        server = https.createServer(httpsCredentials, app);\n    }\n\n    return {\n        app,\n        server\n    };\n};\n\nconst { app, server } = createAppServer();\n\napp.set('view engine', 'hbs');\napp.set('views', path.join(__dirname, 'views'));\n\n// Define the folder that will be used for static assets\napp.use(express.static(path.join(__dirname + '/../build/static/')));\n\n// Universal routing and rendering for SEO\nfor (let i in routeConfig) {\n    let routePath = routeConfig[i].route;\n    let routeView = routeConfig[i].view;\n    let title = routeConfig[i].head.title;\n\n    app.get(routePath, (req, res) => {\n        let promises: any = [];\n        const context: any = {};\n        const initialState = {};\n        const store = createStore(\n            rootReducer,\n            initialState,\n            applyMiddleware(\n                thunkMiddleware\n            )\n        );\n\n        routes.some((route: IRoute) => {\n            const match = matchPath(req.url, route);\n            if (match && route.fetchData) {\n                const Comp = route.component.WrappedComponent;\n                const initData = (Comp && route.fetchData) || (() => Promise.resolve());\n                // fetchData calls a dispatch on the store updating the current state before render\n                promises.push(initData(store));\n            }\n            return !!match;\n        });\n\n        Promise.all(promises).then(() => {\n            const markup = ReactDOMServer.renderToString(\n                <Provider store={store}>\n                    <StaticRouter location={req.url} context={context}>\n                        <Layout />\n                    </StaticRouter>\n                </Provider>\n            );\n\n            // This gets the initial state created after all dispatches are called in fetchData\n            Object.assign(initialState, store.getState());\n\n            const state = JSON.stringify(initialState);\n\n            if (context.url) {\n                printLogs(true, 'SERVER_CLIENT', null, 'Somewhere a <Redirect> was rendered');\n                res.writeHead(context.status, {\n                    'Location': context.url\n                });\n                res.end();\n            } else {\n                return res.render(routeView, {title, markup, state});\n            }\n        });\n\n    });\n}\n\n// Start the server\nconst port = globalConfig[process.env.NODE_ENV].clientPort;\nserver.listen(port, (err: any) => {\n    if (err) {\n        return console.error(err);\n    }\n    printLogs(true, 'SERVER_CLIENT', null, `Server running on port, ${port}, with process id ${process.pid}`);\n});\n"],"sourceRoot":""}