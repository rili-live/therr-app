{"version":3,"sources":["webpack:///./src/components/layout.tsx","webpack:///./src/routes/index.ts","webpack:///./src/server-client.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,wDAA+B;AAC/B,0DAAqD;AACrD,4EAAsC;AACtC,2FAAkF;AAClF,6GAAsE;AACtE,uCAAuC;AACvC,wCAAwC;AACxC,kEAAkE;AAClE,2LAA+F,CAAC,+CAA+C;AAC/I,6CAA6C;AAC7C,8CAA8C;AAC9C,4IAAmE,CAAC,+CAA+C;AACnH,2FAA+C;AAC/C,6CAA6C;AAC7C,iGAA0D;AAC1D,oDAAoD;AACpD,+EAA+B;AAG/B,IAAI,aAAkB,CAAC;AAEvB,MAAM,eAAe,GAAG,CAAC,KAAU,EAAE,EAAE;IACnC,OAAO;QACH,eAAe,EAAE,KAAK,CAAC,aAAa;KACvC,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAE,EAAE;IAC9C,OAAO,0BAAkB,CAAC,EAEzB,EAAE,QAAQ,CAAC,CAAC;AACjB,CAAC,CAAC;AAkBF,2BAA2B;AAC3B,IAAI;AAEJ,kFAAkF;AAClF,MAAM,MAAO,SAAQ,KAAK,CAAC,SAAmD;IAC1E,YAAY,KAAmB;QAC3B,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACT,iBAAiB,EAAE,KAAK;SAC3B,CAAC;QAEF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,kBAAkB;QACd,qFAAqF;QACrF,kDAAkD;QAClD,sBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,YAAY,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACrE,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,QAAkB,EAAE,MAAW,EAAE,EAAE;YAC1E,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iBAAiB;QACb,6EAA6E;QAC7E,IAAI,CAAC,QAAQ,CAAC;YACV,iBAAiB,EAAE,IAAI;SAC1B,CAAC,CAAC;IACP,CAAC;IAED,YAAY,CAAC,QAAkB;QAC3B,oBAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACjB,wCAAwC;QACxC,yDAAyD;QACzD,kDAAkD;QAClD,IAAI;IACR,CAAC;IAED,MAAM;QACF,0DAA0D;QAC1D,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE;YAC5B,OAAO,CACH;gBACI,6CAGS;gBAET,oBAAC,wCAAS,IACN,MAAM,EAAE,IAAI,EACZ,KAAK,EAAE,IAAI,EACX,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,GAAG,EACZ,SAAS,EAAC,KAAK,EACf,SAAS,EAAC,wBAAwB;oBAElC,oBAAC,yBAAM;wBACF,gBAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;4BACrB,IAAI,KAAK,CAAC,MAAM,EAAE;gCACd,OAAO,CACH,oBAAC,wBAAK,kBAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAM,KAAK,EAAI,CAC9D,CAAC;6BACL;iCAAM;gCACH,OAAO,CACH,oBAAC,wBAAK,kBAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAM,KAAK,EAAI,CAC9D,CAAC;6BACL;wBACL,CAAC,CAAC;wBACF,oBAAC,yCAAkB,IAAC,IAAI,EAAC,WAAW,EAAC,EAAE,EAAC,GAAG,GAAG,CACzC,CACD;gBAKZ,0DAAoC,CAClC,CACT,CAAC;SACL;aAAM;YACH,mDAAmD;YACnD,OAAO,CACH;gBACI,6CAGS,CACP,CACT,CAAC;SACL;IACL,CAAC;IAED,oBAAoB;QAChB,aAAa,EAAE,CAAC;IACpB,CAAC;CACJ;AAED,kBAAe,6BAAU,CAAC,qBAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;AClJhF,yFAAmC;AACnC,0EAA0B;AAC1B,wGAA4C;AAc5C,IAAI,MAAM,GAAa;IACnB;QACI,IAAI,EAAE,GAAG;QACT,SAAS,EAAE,cAAI;QACf,KAAK,EAAE,IAAI;KACd;IACD;QACI,IAAI,EAAE,YAAY;QAClB,SAAS,EAAE,mBAAQ;QACnB,KAAK,EAAE,IAAI;KACd;IACD,IAAI;IACJ,qBAAqB;IACrB,uBAAuB;IACvB,iBAAiB;IACjB,KAAK;IACL,IAAI;IACJ,wBAAwB;IACxB,0BAA0B;IAC1B,iBAAiB;IACjB,KAAK;IAEL,iDAAiD;IACjD;QACI,WAAW,EAAE,wBAAY;KAC5B;CACJ,CAAC;AAEF,kBAAe,MAAM,CAAC;;;;;;;;;;;;;;;AC5CtB,qDAA6B;AAC7B,wDAA+B;AAC/B,qDAA6B;AAC7B,8DAAmC;AACnC,+CAAyB;AAWzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE;IACtB,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,4CAA4C;CACnE;AAED,wDAA+B;AAC/B,0GAAmD;AACnD,2FAA2D;AAC3D,0DAAqD;AACrD,4EAAuC;AACvC,4EAA0C;AAC1C,+IAAiE,CAAC,+CAA+C;AACjH,8FAAuD;AACvD,uFAAwC;AACxC,oFAAqC;AACrC,+FAAyC;AACzC,8EAA0C;AAE1C,uEAAuE;AACvE,MAAM,eAAe,GAAG,GAAG,EAAE;IACzB,IAAI,GAAG,GAAG,OAAO,EAAE,CAAC;IACpB,IAAI,MAAM,CAAC;IACX,IAAI,IAAsC,EAAE;QACxC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KACnC;SAAM,EAMN;IAED,OAAO;QACH,GAAG;QACH,MAAM;KACT,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,eAAe,EAAE,CAAC;AAE1C,GAAG,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC9B,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AAEhD,wDAAwD;AACxD,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC;AAEpE,0CAA0C;AAC1C,KAAK,IAAI,CAAC,IAAI,qBAAW,EAAE;IACvB,IAAI,SAAS,GAAG,qBAAW,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACrC,IAAI,SAAS,GAAG,qBAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpC,IAAI,KAAK,GAAG,qBAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;IAEtC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5B,IAAI,QAAQ,GAAQ,EAAE,CAAC;QACvB,MAAM,OAAO,GAAQ,EAAE,CAAC;QACxB,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,MAAM,KAAK,GAAG,mBAAW,CACrB,kBAAW,EACX,YAAY,EACZ,uBAAe,CACX,qBAAe,CAClB,CACJ,CAAC;QAEF,gBAAM,CAAC,IAAI,CAAC,CAAC,KAAa,EAAE,EAAE;YAC1B,MAAM,KAAK,GAAG,4BAAS,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACxC,IAAI,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE;gBAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC;gBAC9C,MAAM,QAAQ,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;gBACxE,mFAAmF;gBACnF,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;aAClC;YACD,OAAO,CAAC,CAAC,KAAK,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC5B,MAAM,MAAM,GAAG,cAAc,CAAC,cAAc,CACxC,oBAAC,sBAAQ,IAAC,KAAK,EAAE,KAAK;gBAClB,oBAAC,+BAAY,IAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO;oBAC7C,oBAAC,gBAAM,OAAG,CACC,CACR,CACd,CAAC;YAEF,mFAAmF;YACnF,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAE9C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAE3C,IAAI,OAAO,CAAC,GAAG,EAAE;gBACb,oBAAS,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,qCAAqC,CAAC,CAAC;gBAC9E,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE;oBAC1B,UAAU,EAAE,OAAO,CAAC,GAAG;iBAC1B,CAAC,CAAC;gBACH,GAAG,CAAC,GAAG,EAAE,CAAC;aACb;iBAAM;gBACH,OAAO,GAAG,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;aACxD;QACL,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;CACN;AAED,mBAAmB;AACnB,MAAM,IAAI,GAAG,YAAY,CAAC,aAAoB,CAAC,CAAC,UAAU,CAAC;AAC3D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAQ,EAAE,EAAE;IAC7B,IAAI,GAAG,EAAE;QACL,OAAO,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC7B;IACD,oBAAS,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,2BAA2B,IAAI,qBAAqB,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AAC9G,CAAC,CAAC,CAAC","file":"server-client.8d7a902ae465ad143dc8.hot-update.js","sourcesContent":["import * as React from 'react';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Route, Switch, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { TransitionGroup as Animation } from 'react-transition-group';\n// import * as ReactGA from 'react-ga';\n// import TopNav from './pieces/TopNav';\n// import { configureAuthRoute } from '../library/authentication';\nimport { RedirectWithStatus } from 'rili-public-library/react-components/redirect-with-status'; // tslint:disable-line no-implicit-dependencies\n// import { Alerts } from '../library/alerts'\n// import { Loader } from '../library/loader';\nimport { scrollTo } from 'rili-public-library/utilities/scroll-to'; // tslint:disable-line no-implicit-dependencies\nimport initInterceptors from '../interceptors';\n// import roleConfig from '../../roleConfig';\nimport * as globalConfig from '../../../global-config.js';\n// const AuthRoute = configureAuthRoute(roleConfig);\nimport routes from '../routes';\nimport { Location } from 'history';\n\nlet _viewListener: any;\n\nconst mapStateToProps = (state: any) => {\n    return {\n        'redirectRoute': state.redirectRoute\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return bindActionCreators({\n\n    }, dispatch);\n};\n\ninterface ILayoutRouterProps {\n\n}\n\ninterface ILayoutProps extends RouteComponentProps {\n\n}\n\ninterface ILayoutProps extends RouteComponentProps<ILayoutRouterProps> {\n// Add your regular properties here\n}\n\ninterface ILayoutDispatchProps {\n// Add your dispatcher properties here\n}\n\n// interface ILayoutState {\n// }\n\n// TODO: Animation between view change is not working when wrapped around a Switch\nclass Layout extends React.Component<ILayoutProps & ILayoutDispatchProps, any> {\n    constructor(props: ILayoutProps) {\n        super(props);\n\n        this.state = {\n            'clientHasLoaded': false\n        };\n\n        this.onViewChange = this.onViewChange.bind(this);\n    }\n\n    componentWillMount() {\n        // TODO: Check if this should be initialized in index with history passed as argument\n        // Initialize global interceptors such as 401, 403\n        initInterceptors(this.props.history, globalConfig.baseApiRoute, 300);\n        _viewListener = this.props.history.listen((location: Location, action: any) => {\n            this.onViewChange(location);\n        });\n    }\n\n    componentDidMount() {\n        // ReactGA.initialize(globalConfig[process.env.NODE_ENV].googleAnalyticsKey);\n        this.setState({\n            'clientHasLoaded': true\n        });\n    }\n\n    onViewChange(location: Location) {\n        scrollTo(0, 100);\n        // if (typeof(window) !== 'undefined') {\n        //     ReactGA.set({ 'page': window.location.pathname });\n        //     ReactGA.pageview(window.location.pathname);\n        // }\n    }\n\n    render() {\n        // Cloak the view so it doesn't flash before client mounts\n        if (this.state.clientHasLoaded) {\n            return (\n                <div>\n                    <header>\n                        Header\n                        {/* <TopNav/> */}\n                    </header>\n\n                    <Animation\n                        appear={true}\n                        enter={true}\n                        exit={true}\n                        timeout={250}\n                        component=\"div\"\n                        className=\"content-container view\"\n                    >\n                        <Switch>\n                            {routes.map((route, i) => {\n                                if (route.access) {\n                                    return (\n                                        <Route location={this.props.location} key={i} {...route} />\n                                    );\n                                } else {\n                                    return (\n                                        <Route location={this.props.location} key={i} {...route} />\n                                    );\n                                }\n                            })}\n                            <RedirectWithStatus from=\"/redirect\" to=\"/\" />\n                        </Switch>\n                    </Animation>\n\n                    {/* <Alerts></Alerts> */}\n                    {/* <Loader></Loader> */}\n\n                    <footer>This is the footer.</footer>\n                </div>\n            );\n        } else {\n            // Opportunity to add a loader of graphical display\n            return (\n                <div>\n                    <header>\n                        Header\n                        {/* <TopNav/> */}\n                    </header>\n                </div>\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        _viewListener();\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Layout));","import ChatRoom from './chat-room';\nimport Home from './home';\nimport PageNotFound from './page-not-found';\nimport { RouteProps } from 'react-router-dom';\n// import Login from './components/pages/Login';\n// import NotFound from './components/pages/NotFound';\n// import Register from './components/pages/Register';\n\nexport interface IRoute extends RouteProps {\n    access?: any;\n    exact?: boolean;\n    fetchData?: Function;\n    // Overriding this property allows us to add custom paramaters to React components\n    component: any;\n}\n\nlet routes: IRoute[] = [\n    {\n        path: '/',\n        component: Home,\n        exact: true\n    },\n    {\n        path: '/chat-room',\n        component: ChatRoom,\n        exact: true\n    },\n    // {\n    // \t'path': '/login',\n    // \t'component': Login,\n    // \t'exact': true\n    // },\n    // {\n    // \t'path': '/register',\n    // \t'component': Register,\n    // \t'exact': true\n    // },\n\n    // If no route matches, return NotFound component\n    {\n        'component': PageNotFound\n    }\n];\n\nexport default routes;","import * as http from 'http';\nimport * as https from 'https';\nimport * as path from 'path';\nimport * as express from 'express';\nimport * as fs from 'fs';\n\n// TODO: RFRONT-9: Fix window is undefined hack\ndeclare global {\n    namespace NodeJS {\n        interface Global { // tslint:disable-line\n            window: any;\n        }\n    }\n}\n\nif (!process.env.BROWSER) {\n    global.window = {}; // Temporarily define window for server-side\n}\n\nimport * as React from 'react';\nimport * as ReactDOMServer from 'react-dom/server';\nimport { StaticRouter, matchPath } from 'react-router-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport printLogs from 'rili-public-library/utilities/print-logs'; // tslint:disable-line no-implicit-dependencies\nimport * as globalConfig from '../../global-config.js';\nimport routeConfig from './routeConfig';\nimport rootReducer from './reducers';\nimport Layout from './components/layout';\nimport routes, { IRoute } from './routes';\n\n// Initialize the server and configure support for handlebars templates\nconst createAppServer = () => {\n    let app = express();\n    let server;\n    if (process.env.NODE_ENV === 'development') {\n        server = http.createServer(app);\n    } else if (process.env.NODE_ENV === 'production') {\n        let httpsCredentials = {\n            key: fs.readFileSync(globalConfig[process.env.NODE_ENV].security.keyLocation),\n            cert: fs.readFileSync(globalConfig[process.env.NODE_ENV].security.certLocation),\n        };\n        server = https.createServer(httpsCredentials, app);\n    }\n\n    return {\n        app,\n        server\n    };\n};\n\nconst { app, server } = createAppServer();\n\napp.set('view engine', 'hbs');\napp.set('views', path.join(__dirname, 'views'));\n\n// Define the folder that will be used for static assets\napp.use(express.static(path.join(__dirname + '/../build/static/')));\n\n// Universal routing and rendering for SEO\nfor (let i in routeConfig) {\n    let routePath = routeConfig[i].route;\n    let routeView = routeConfig[i].view;\n    let title = routeConfig[i].head.title;\n\n    app.get(routePath, (req, res) => {\n        let promises: any = [];\n        const context: any = {};\n        const initialState = {};\n        const store = createStore(\n            rootReducer,\n            initialState,\n            applyMiddleware(\n                thunkMiddleware\n            )\n        );\n\n        routes.some((route: IRoute) => {\n            const match = matchPath(req.url, route);\n            if (match && route.fetchData) {\n                const Comp = route.component.WrappedComponent;\n                const initData = (Comp && route.fetchData) || (() => Promise.resolve());\n                // fetchData calls a dispatch on the store updating the current state before render\n                promises.push(initData(store));\n            }\n            return !!match;\n        });\n\n        Promise.all(promises).then(() => {\n            const markup = ReactDOMServer.renderToString(\n                <Provider store={store}>\n                    <StaticRouter location={req.url} context={context}>\n                        <Layout />\n                    </StaticRouter>\n                </Provider>\n            );\n\n            // This gets the initial state created after all dispatches are called in fetchData\n            Object.assign(initialState, store.getState());\n\n            const state = JSON.stringify(initialState);\n\n            if (context.url) {\n                printLogs(true, 'SERVER_CLIENT', null, 'Somewhere a <Redirect> was rendered');\n                res.writeHead(context.status, {\n                    'Location': context.url\n                });\n                res.end();\n            } else {\n                return res.render(routeView, {title, markup, state});\n            }\n        });\n\n    });\n}\n\n// Start the server\nconst port = globalConfig[process.env.NODE_ENV].clientPort;\nserver.listen(port, (err: any) => {\n    if (err) {\n        return console.error(err);\n    }\n    printLogs(true, 'SERVER_CLIENT', null, `Server running on port, ${port}, with process id ${process.pid}`);\n});\n"],"sourceRoot":""}