ARG NODE_VERSION=12.16.0
FROM node:$NODE_VERSION

ARG NODE_ENV=development
ENV NODE_ENV $NODE_ENV

EXPOSE 7770

RUN npm i npm@latest -g

# Create app directory
RUN mkdir -p /usr/src/app/rili-server \
    && chown -R node:node /usr/src/app
WORKDIR /usr/src/app

# the official node image provides an unprivileged user as a security best practice
# but we have to manually enable it. We put it here so npm installs dependencies as the same
# user who runs the app. 
# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user
USER node

# Copy parent app config
# Note: This is the root mono-repo directory
COPY ./package*.json ./
COPY ./.babelrc ./
COPY ./global-config.js ./
COPY ./webpack.parts.js ./

# Install dependencies and set PATH variable
RUN npm i --no-optional && npm cache clean --force
ENV PATH $PATH:/usr/src/app/node_modules/.bin:$PATH

COPY ./rili-public-library ./rili-public-library
COPY ./rili-server ./rili-server
USER root
RUN chown -R node:node /usr/src/app/rili-server/build
USER node
WORKDIR /usr/src/app/rili-server

RUN echo "Building in $NODE_ENV environment" \
    && npm run build:dev;

# check every 30s to ensure this service returns HTTP 200
# HEALTHCHECK --interval=30s CMD node healthcheck.js

CMD ["npx", "nodemon", "--require=../node_modules/dotenv/config", "./build/server-api.js", "dotenv_config_path=../.env", "--withAllLogs"]
